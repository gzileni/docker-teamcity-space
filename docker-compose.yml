version: '3.8'


# Default ${TEAMCITY_VERSION} is defined in .env file

# ./buildserver_pgdata - Posgres DB data
# ./data_dir - TeamCity data directory
# ./teamcity-server-logs - logs of primary TeamCity server
# ./agents/agent-1/conf - configuration directory for the first build agent
# ./agents/agent-1/conf - configuration directory for the second build agent

services:

  teamcity-sqlserver:
    container_name: teamcity-sqlserver-docker
    image: sqlserver/teamcity
    restart: always
    profiles: ["all", "teamcity"]
    environment:
      ACCEPT_EULA: Y
      MSSQL_SA_PASSWORD: ${SQLSERVER_PWD}
      SA_PASSWORD: ${SQLSERVER_PWD}
      MSSQL_PID: Evaluation
    ports:
      - 1433:1433
    networks:
        - "frontend"
        - "backend-apps"
        - "backend-data"

  nginx:
    image: nginx:1.19
    profiles: ["all", "teamcity", "space"]
    ports:
      - 8222:8222
    volumes:
      - ./nginx:/etc/nginx/conf.d
    networks:
        - "frontend"
        - "backend-apps"
        - "backend-data"

  teamcity-server:
    image: jetbrains/teamcity-server
    profiles: ["all", "teamcity"]
    ports:
      - ${TEAMCITY_PORT}:8111
    volumes:
      - ./data/teamcity/docker:/data/teamcity_server/datadir
      - ./teamcity/docker/logs/teamcity-server-logs:/opt/teamcity/logs
    depends_on:
      - teamcity-sqlserver
    networks:
        - "frontend"
        - "backend-apps"
        - "backend-data"

  init-configs:
    image: "public.registry.jetbrains.space/p/space-on-premises/docker/init-configs:2023.2.0"
    profiles: ["all", "space"]
    volumes:
        - config:/home/init-config/config
    environment:
        AUTOMATION_TAG: "2023.2.0.128"
        SPACE_VERSION: "2023.2.0"

  space:
    image: "public.registry.jetbrains.space/p/space-on-premises/docker/space:2023.2.0"
    profiles: ["all", "space"]
    volumes:
        - config:/home/space/circlet-server-onprem/config
    environment:
        JAVA_OPTS: "-Dconfig.file=/home/space/circlet-server-onprem/config/space.on-premises.conf -Dconfig.override_with_env_vars=true"
    depends_on:
        init-configs:
            condition: service_completed_successfully
        vcs:
            condition: service_started
        redis:
            condition: service_started
        postgres:
            condition: service_started
        minio:
            condition: service_started
        elasticsearch:
            condition: service_healthy
    ports:
        - "8084:8084"
    networks:
        - "frontend"
        - "backend-apps"
        - "backend-data"

  vcs:
    image: "public.registry.jetbrains.space/p/space-on-premises/docker/vcs-hosting:2023.2.0"
    profiles: ["all", "space"]
    volumes:
        - config:/home/space/git/vcs-hosting/config
    environment:
        JAVA_OPTS: '-Dproperties.file=config/vcs.on-premises.properties'
    depends_on:
        init-configs:
            condition: service_completed_successfully
        redis:
            condition: service_started
        postgres:
            condition: service_started
        minio:
            condition: service_started
        elasticsearch:
            condition: service_healthy
    ports:
        - "2222:2222"
        - "8080:8080"
    networks:
        - "frontend"
        - "backend-apps"
        - "backend-data"

  packages:
    image: "public.registry.jetbrains.space/p/space-on-premises/docker/packages:2023.2.0"
    profiles: ["all", "space"]
    volumes:
        - config:/home/space/packages-server/config
    environment:
        JAVA_OPTS: '-Dconfig.file=/home/space/packages-server/config/packages.on-premises.conf -Dconfig.override_with_env_vars=true'
    depends_on:
        init-configs:
            condition: service_completed_successfully
        redis:
            condition: service_started
        postgres:
            condition: service_started
        minio:
            condition: service_started
        elasticsearch:
            condition: service_healthy
    ports:
        - "8390:8390"
        - "9390:9390"
    networks:
        - "frontend"
        - "backend-apps"
        - "backend-data"

  langservice:
    image: "public.registry.jetbrains.space/p/space-on-premises/docker/langservice:2023.2.0"
    profiles: ["all", "space"]
    volumes:
        - config:/home/space/langservice-server/config
    environment:
        JAVA_OPTS: "-Dconfig.file=/home/space/langservice-server/config/langservice.on-premises.conf -Dconfig.override_with_env_vars=true"
    depends_on:
        init-configs:
            condition: service_completed_successfully
    ports:
        - "8095"
    networks:
        - "backend-apps"

  postgres:
    image: "postgres:12.2"
    profiles: ["all", "space"]
    volumes:
        - db_data:/var/lib/postgresql/data
    environment:
        POSTGRES_USER: space
        POSTGRES_PASSWORD: spacepassword
        POSTGRES_DB: spacedb
    ports:
        - "5432"
    networks:
        - "backend-data"

  elasticsearch:
    image: "elasticsearch:7.17.7"
    profiles: ["all", "space"]
    volumes:
        - elasticsearch_data:/usr/share/elasticsearch/data
    environment:
        ES_JAVA_OPTS: -Xms512m -Xmx1024m
        discovery.type: single-node
        xpack.security.enabled: "false"
    ports:
        - "9200"
        - "9300"
    healthcheck:
        test: [ "CMD", "curl", "-f", "http://localhost:9200/_cat/health" ]
        interval: 5s
        timeout: 5s
        retries: 10
        start_period: 20s
    networks:
        - "backend-data"

  redis:
    image: "redis:7.0.2-alpine"
    profiles: ["all", "space"]
    ports:
        - "6379"
    networks:
        - "backend-data"

  minio:
    image: minio/minio:RELEASE.2021-09-09T21-37-07Z
    profiles: ["all", "space"]
    volumes:
        - minio_data:/data
    environment:
        MINIO_ROOT_USER: space-access-key
        MINIO_ROOT_PASSWORD: space-secret-key
    command: server --address :9000 --console-address :9001 --compat /data
    ports:
        - "9000:9000"
        - "9001"
    networks:
        - "backend-data"

volumes:
  elasticsearch_data: {}
  db_data: {}
  minio_data: {}
  config: {}

networks:
  frontend: {}
  backend-apps: {}
  backend-data: {}